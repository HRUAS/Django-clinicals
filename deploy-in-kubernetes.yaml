# MySQL Secret
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: cGFzc3dvcmQ=  # base64 encoded "password"
---
# Django Secret
apiVersion: v1
kind: Secret
metadata:
  name: django-secret
type: Opaque
data:
  DB_PASSWORD: cGFzc3dvcmQ=  # base64 encoded "password"
---
# MySQL ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_DATABASE: clinicals
---
# Django ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: django-config
data:
  DB_HOST: mysql-service
  DB_NAME: clinicals
  DB_USER: root
  DB_PORT: "3306"
---
# MySQL Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:latest
        envFrom:
        - configMapRef:
            name: mysql-config
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: MYSQL_ROOT_PASSWORD
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        readinessProbe:
          exec:
            command: ["mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 10
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pvc
---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
---
# Django Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: django
  template:
    metadata:
      labels:
        app: django
    spec:
      initContainers:
      - name: wait-for-mysql
        image: mysql:latest
        command: ['sh', '-c', 'until mysqladmin ping -h mysql-service -u root -p${DB_PASSWORD} --silent; do echo waiting for mysql; sleep 2; done;']
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: django-secret
              key: DB_PASSWORD
      containers:
      - name: django
        image: akhil1993/django-app:v1.2.3
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: django-config
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: django-secret
              key: DB_PASSWORD
        ports:
        - containerPort: 8000
        command: ["/bin/sh", "-c"]
        args:
        - python /app/clinicals/manage.py makemigrations &&
          python /app/clinicals/manage.py migrate &&
          python /app/clinicals/manage.py runserver 0.0.0.0:8000
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
      restartPolicy: Always
---
# Django Service
apiVersion: v1
kind: Service
metadata:
  name: django-service
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: django
---
# ManagedCertificate for Google-Managed Certificate
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: django-certificate
spec:
  domains:
  - testing-my-app.in
---
# FrontendConfig for HTTP-to-HTTPS Redirect
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: redirect-to-https
spec:
  redirectToHttps:
    enabled: true
    responseCodeName: "301"
---
# Ingress for HTTPS with Google-Managed Certificate
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: django-ingress
  annotations:
    kubernetes.io/ingress.class: "gce"
    networking.gke.io/managed-certificates: "django-certificate"
    networking.gke.io/v1beta1.FrontendConfig: "redirect-to-https"
  labels:
    app: django
spec:
  rules:
  - host: testing-my-app.in
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: django-service
            port:
              number: 8000